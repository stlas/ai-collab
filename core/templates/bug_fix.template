Analysiere und behebe folgenden Bug systematisch: ${PROMPT}

## üîç Bug-Analyse Workflow:

### 1. Problem-Identifikation
- **Symptom:** Was ist das beobachtete Problem?
- **Erwartetes Verhalten:** Was sollte stattdessen passieren?
- **Reproduktion:** Unter welchen Bedingungen tritt der Bug auf?

### 2. Root-Cause-Analyse
- **Fehler-Lokalisierung:** Wo im Code liegt das Problem?
- **Ursachen-Hierarchie:** Direkte und indirekte Ursachen
- **Abh√§ngigkeiten:** Welche anderen Komponenten sind betroffen?

### 3. L√∂sungsstrategie
- **L√∂sungsans√§tze:** Verschiedene Reparatur-M√∂glichkeiten
- **Aufwand-Nutzen:** Bewertung der L√∂sungsalternativen
- **Risiko-Assessment:** Potenzielle Seiteneffekte

### 4. Implementation
```
// Vorher (mit Bug):
[Buggy Code hier]

// Nachher (behoben):
[Fixed Code hier]

// Erkl√§rung:
[Warum diese L√∂sung das Problem behebt]
```

### 5. Validierung & Testing
- **Unit Tests:** Teste die spezifische Fix
- **Regression Tests:** Stelle sicher, dass nichts anderes kaputt geht
- **Edge Cases:** Teste Grenzf√§lle

### 6. Pr√§vention
- **Code-Review-Punkte:** Was h√§tte diesen Bug verhindert?
- **Monitoring:** Wie kann √§hnliches k√ºnftig fr√ºher erkannt werden?
- **Dokumentation:** Was sollte dokumentiert werden?

## üéØ Fokus auf:
- Minimale, chirurgische Eingriffe
- Saubere, testbare L√∂sung
- Keine Breaking Changes
- Performance-Erhalt

Liefere produktionsreifen Code mit ausf√ºhrlichen Erkl√§rungen.